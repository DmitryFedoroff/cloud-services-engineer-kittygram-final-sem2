---
name: Deploy

on:
  push:
    branches: [ main ]

env:
  REGISTRY_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  REGISTRY_PASS: ${{ secrets.DOCKERHUB_PASSWORD }}
  SERVER_HOST: ${{ secrets.SERVER_IP }}
  SERVER_USER: ${{ secrets.SSH_USERNAME }}
  SERVER_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  tests:
    name: Check PEP8
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9", "3.10" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: |
          pip install flake8
          flake8 --ignore=E123,E301,E302,E501,W291,W292,W293,F401 .

  build:
    name: Push to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}
      - name: Build & push backend
        run: |
          docker build -t $REGISTRY_USER/kittygram_backend:latest ./backend
          docker push $REGISTRY_USER/kittygram_backend:latest
      - name: Build & push frontend
        run: |
          docker build -t $REGISTRY_USER/kittygram_frontend:latest ./frontend
          docker push $REGISTRY_USER/kittygram_frontend:latest
      - name: Build & push gateway
        run: |
          docker build -t $REGISTRY_USER/kittygram_gateway:latest ./nginx
          docker push $REGISTRY_USER/kittygram_gateway:latest

  deploy:
    name: Deploy to remote server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Upload .env
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_KEY }}
          script: |
            mkdir -p ~/kittygram
            cat > ~/kittygram/.env <<EOF
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            EOF

      - name: Upload compose file
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_KEY }}
          source: "docker-compose.production.yml"
          target: "~/kittygram"

      - name: Ensure docker-compose exists
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_KEY }}
          script: |
            set -e
            if ! command -v docker-compose >/dev/null 2>&1 ; then
              if docker compose version >/dev/null 2>&1 ; then
                sudo ln -sf "$(command -v docker)" /usr/local/bin/docker-compose
              else
                sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
                  -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
              fi
            fi

      - name: Pull images & run stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_KEY }}
          script: |
            set -e
            cd ~/kittygram
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml down
            docker compose -f docker-compose.production.yml up -d

            echo "Expecting PostgreSQL health..."
            until [ "$(docker inspect --format='{{.State.Health.Status}}' $(docker compose -f docker-compose.production.yml ps -q kitty_postgres))" = "healthy" ]; do
              sleep 5
            done

            echo "Expecting backend health..."
            until [ "$(docker inspect --format='{{.State.Health.Status}}' $(docker compose -f docker-compose.production.yml ps -q kitty_backend))" = "healthy" ]; do
              sleep 5
            done

            docker compose -f docker-compose.production.yml exec -T kitty_backend \
              python manage.py migrate --noinput
            docker compose -f docker-compose.production.yml exec -T kitty_backend \
              python manage.py collectstatic --noinput

  auto_tests:
    name: Run Auto Tests
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: |
          pip install pytest pyyaml requests
          pytest

  send_message:
    name: Send Message to Telegram
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Notify in Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Deploy for «cloud-services-engineer-kittygram-final-sem2» успешно завершён!
            User:  ${{ github.actor }}
            Commit: ${{ github.event.head_commit.message }}
            Link:  https://github.com/${{ github.repository }}/commit/${{ github.sha }}
